:root {
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097a7;
    --gris: #757576;
    --grisClaro: #DFE9F3;
}

/* Globales */
html {
    font-size: 62.5%;
    box-sizing: border-box; /* Hack para el manejo de box model */
    scroll-snap-type: y mandatory; /* La letra "y" hace referencia al eje y que quiere decir que se enfoca en el scroll vertical. Mandatory define que tan estricto se requiere el scroll. Otra alternativa menos estricta es proximity */
    }
    /* Scroll snap */
    .titulo,
    .servicios-heading,
    .contacto-heading {
    scroll-snap-align: start; /* Indica el punto en el contenedor de desplazamiento al que debe ajustarse el contenido*/
    scroll-snap-stop: always; /* Controla si el desplazamiento debe detenerse siempre en los puntos de ajuste */
}

/* Hack para el manejo de box model */
*, *:before, *:after {
    box-sizing: inherit;
}

body {
    font-size: 16px;
    font-family: 'Krub', sans-serif;

}

.sombra {
    /* Sombra del elemento en el borde */
    box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    -webkit-box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    -moz-box-shadow: 0px 0px 15px 0px rgba(112,112,112,0.48);
    background-color: var(--blanco);
    padding: 2rem; /* Espacio interior */
    border-radius: 1rem; /* Esquinas redondeadas */
}

/* Tipografía */
h1 {
    font-size: 3.8rem;
}

h2 {
    font-size: 2.8rem;
}

h3 {
    font-size: 1.8rem;
}

h1,h2,h3 {
    text-align: center;
}

/* Títulos */
.titulo span{
    font-size: 2rem;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}

/* Utilidades */
.w-sm-100{
    width: 100%;
}

@media (min-width: 768px) {
    .w-sm-100{
    width: auto;
    }
}

.flex {
    display: flex;
}

.alinear-derecha {
    justify-content: flex-end;
}

/* Navegación principal */
.nav-bg{
    background-color: var(--secundario);
}

.navegacion-principal {
    display: flex;
    flex-direction: column;
    /* justify-content es para filas (row) y align-items, para columnas */
    justify-content: space-between;
    font-weight: bold;
    font-size: 2rem;
    align-items: center;
}

.navegacion-principal a {
    padding: 1rem;
    color: var(--blanco);
    text-decoration: none;
}

.navegacion-principal a:hover {
    background-color: var(--primario);
    color: var(--oscuro);
}

/*
Recomendado para Media Query
480px para móviles
768px para tablets
1140px para laptops
1400px para dispositivos más grandes
*/

/* Navegacion principal */
@media (min-width: 768px) {
    .navegacion-principal{
        flex-direction: row;
    }
}

/* Hero */
.hero {
    background-image: url(../Images/hero.png);
    /*
    ../ es para regresar un nivel de directorio,
    la carpeta img está afuera de CSS */
    background-repeat: no-repeat; /* Para evitar que
    se repita la imagen si se hace zoom out */
    background-size: cover; /* Sirve para cubir la imagen con todo el tamaño de la pantalla */
    height: 450px; /* Alto del elemento hero */
    position: relative; /* El padre debe ser relative */
    margin-bottom: 2rem; /* Margen inferior para separar el contenido */
}

.contenido-hero {
    position: absolute; /* El hijo debe ser absolute */
    background-color: rgba(0,0,0,.7); /* 70% de transparencia */
    width: 100%;
    height: 100%;
    /* Alinear vertical y horizontalmente */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.contenido-hero p, .contenido-hero h2 {
    color: var(--blanco);
}

.ubicacion {
    display: flex;
    align-items: flex-end;
}

/* Botón */
.boton{
    background-color: var(--secundario); /* Color de fondo del botón */
    color: var(--blanco); /* Color del texto */
    padding: 1rem 3rem; /* Espacio interior */
    margin-top: 3rem; /* Separación superior*/
    font-size: 2rem; /* Tamaño de la letra */
    text-decoration: none; /* Quitar el subrayado */
    text-transform: uppercase; /* Convertir texto en mayúsculas */
    font-weight: bold; /* Texto en negritas */
    border-radius: .5rem; /* Esquinas redondeadas */
    width: 90%; /* Ancho del botón, que abarque el 90% posible si se encuentra en una pantalla pequeña */
    text-align: center; /* Centrar el texto del botón */
    border: none; /* Esto afecta únicamente al boton de la etiqueta "input", si esta
    propiedad no existe en el enlace "a" , simplemente lo ignora */
}

/* Boton */
@media (min-width: 768px) {
    .boton {
    width: auto;
    }
}

.boton:hover {
    cursor: pointer;
}

/* Servicios */
@media (min-width: 768px) {
    .servicios {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* La propiedad define el área de las
    columnas y la función repeat() repite 3 veces 1 fracción en el grid, también se puede
    poner 1fr 1fr 1fr o 33.3% 33.3% 33.3% */
    column-gap: 1rem;
    }
}

.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--secundario);
    font-weight: normal;
}

.servicio p {
    line-height: 2; /* Interlineado */
    text-align: center;
}

.servicio .iconos {
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}

/* Contacto */
.formulario {
    background-color: var(--gris);
    width: min(60rem, 100%); /* Ahorra media querys. ¿Qué es más pequeño, 60rem o el
    100% del tamaño de la pantalla? Ejemplo: Sí tengo un dispositivo móvil con 488px de
    ancho, es más pequeño el 100%, por lo que tomará ese valor y no los 60 rem. Caso contrario, tengo una tablet con 768px, ahí sí es menor 60 rem, por lo que se tomará ese valor */
    margin: 0 auto;
    /* Usarlo si el padre no es un display flex (siendo así se usaría el justify-content, el formulario tiene block por defaulf */
    padding: 2rem;
    border-radius: 1rem;
}

.formulario fieldset {
    border: none;
}

.formulario legend {
    text-align: center;
    font-size: 1.8rem;
    font-weight: bold;
    margin-bottom: 2rem;
    text-transform: uppercase;
    color: var(--primario);
}

.contenedor-campos {
}

.campo {
    margin-bottom: 1rem;
}

.campo label {
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: .5rem;
    display: block; /* Logra que cada label tome todo el espacio disponible y estar separado del input */
}

.input-text {
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}

.campo textarea {
    height: 20rem; /* Hacer más grande la altura del textarea*/
}

@media (min-width: 768px) {
    .contenedor-campos{
        display: grid;
        grid-template-columns: repeat(2,1fr);
        column-gap: 1rem;
        grid-template-rows: auto auto 20rem; /* Darle el espacio de cada fila*/
    }
    /* También se podría crear la clase de ayuda campo-correo para llamar el selector, pero se recomienda no crear nuevas clases si no es estrictamente necesario.
    nth-child significa el # del hijo. El orden sería: nombre, teléfono, correo, mensaje.
    Como requerimos modificar correo y mensaje, usaremos 3 y 4 en nth-child */
    .campo:nth-child(3),
    .campo:nth-child(4){
    grid-column: 1/3; /* Para posicionar el elemento, "que vaya de la columna 1 a la 3*/
    }
}

/* Footer */
.footer {
    text-align: center;
}
